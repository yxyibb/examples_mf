一般的神经网络在理解图片信息的时候还是有不足之处, 这时卷积神经网络就是计算机处理图片的助推器。
Convolutional Neural Networks (CNN) 是神经网络处理图片信息的一大利器。 有了它, 我们给计算机看图片,计算机理解起来就更准确.
计算机视觉处理的飞跃提升，在图像和语音识别方面表现出了强大的优势。

卷积神经网络包含输入层、隐藏层和输出层，隐藏层又包含卷积层和pooling层。
图像输入到卷积神经网络后通过卷积来不断的提取特征，每提取一个特征就会增加一个feature map，所以会看到视频教程中的立方体不断的增加厚度。
那么为什么厚度增加了但是却越来越瘦了呢，这就是pooling层的作用喽，pooling层也就是下采样，通常采用的是最大值pooling和平均值pooling，通过pooling来稀疏参数，使我们的网络不至于太复杂。

通过代码来实现一个基于MNIST数据集的简单卷积神经网络。
数据集是tensorflow里的mnist数据集，导入即可
结构：
    convolutional layer1 + max pooling;
    convolutional layer2 + max pooling;
    fully connected layer1 + dropout;
    fully connected layer2 to prediction.

from __future__ import print_function
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

#data
mnist = imput_data.read_data_sets('MNIST_data',one_hot = true)

mnist = input_data.read_data_sets('MNIST_data',one_hot = True)
def compute_accuracy(v_xs, v_ys):
    global prediction
    y_pre = sess.run(prediction, feed_dict={xs: v_xs, keep_prob: 1})
    correct_prediction = tf.equal(tf.argmax(y_pre,1), tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    result = sess.run(accuracy, feed_dict={xs: v_xs, ys: v_ys, keep_prob: 1})
    return result

#定义Weight变量，输入shape，返回变量的参数。使用tf.truncted_normal产生随机变量来进行初始化。
def weight_variable(shape):
    initial = tf.truncated_normal(shape,stddev = 0.1)
    return tf.Variable(initial)
#定义biase变量，输入shape ,返回变量的一些参数。使用tf.constant常量函数来进行初始化。
def bias_variable(shape):
    initial = tf.constant(0.1,shape=shape)
    return tf.Variable(initial)
#定义tf.nn.conv2d函数是tensoflow里面的二维的卷积函数，x是图片的所有参数，W是此卷积层的权重，然后定义步长strides=[1,1,1,1]值，strides[0]和strides[3]的两个1是默认值，中间两个1代表padding时在x方向运动一步，y方向运动一步，padding采用的方式是SAME
def conv2d(x,W):
    return tf.nn.conv2d(x, W, strides=[1,1,1,1],padding='SAME')
#定义池化pooling，为了得到更多的图片信息，padding时我们选的是一次一步，也就是strides[1]=strides[2]=1，这样得到的图片尺寸没有变化，而我们希望压缩一下图片也就是参数能少一些从而减小系统的复杂度，因此我们采用pooling来稀疏化参数，也就是卷积神经网络中所谓的下采样层。pooling 有两种，一种是最大值池化，一种是平均值池化，本例采用的是最大值池化tf.max_pool()。池化的核函数大小为2x2，因此ksize=[1,2,2,1]，步长为2，因此strides=[1,2,2,1]
def max_pool_2x2(x):
    return tf.nn.max_pool(x, ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME')


#placeholder
xs=tf.placeholder(tf.float32,[None,784])/255
ys=tf.placeholder(tf.float32,[None,10])
keep_prob=tf.placeholder(tf.float32)     #dropout的placeholder 解决过拟合
x_image=tf.reshape(xs,[-1,28,28,1])      #-1代表先不考虑输入的图片例子多少这个维度，后面的1是channel的数量，因为我们输入的图片是黑白的，因此channel是1，例如如果是RGB图像，那么channel就是3

#NN
W_conv1=weight_variable([5,5,1,32])     #定义本层的Weight,本层我们的卷积核patch的大小是5x5，因为黑白图片channel是1所以输入是1，输出是32个featuremap
b_conv1=bias_variable([32])             #定义bias，它的大小是32个长度，因此我们传入它的shape为[32]
h_conv1=tf.nn.relu(conv2d(x_image,W_conv1)+b_conv1)     #tf.nn.relu（修正线性单元）来做激活函数  SAME的padding方式，输出图片大小不变，厚度变厚。
h_pool1=max_pool_2x2(h_conv1)           #经过pooling的处理，输出大小就变为了14x14x32

W_conv2=weight_variable([5,5,32,64])    #5×5patch   32个输入，64个feature map
b_conv2=bias_variable([64])             #64
h_conv2=tf.nn.relu(conv2d(h_pool1,W_conv2)+b_conv2)     #输出 14×14×64
h_pool2=max_pool_2x2(h_conv2)                           #输出 7×7×64

#[n_samples,7,7,64]->>[n_samples,7*7*64]   
h_pool2_flat = tf.reshape(h_pool2,[-1,7*7*64])          #tf.reshape()将h_pool2的输出值从一个三维的变为一维的数据, -1表示先不考虑输入图片例子维度, 将上一个输出结果展平
W_fc1 = weight_variable([7*7*64,1024])                  #输入7×7×64  输出 1024 一维列
b_fc1 = bias_variable([1024])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat,W_fc1)+b_fc1) #此时，直接相乘，不是卷积
h_fc1_drop = tf.nn.dropout(h_fc1,keep_prob)             #解决过拟合问题

W_fc2 = weight_variable([1024,10])                      #输入1024  输出 10   mnist 10类
b_fc2 = bias_variable([10])
prediction=tf.nn.softmax(tf.matmul(h_fc1_drop,W_fc2)+b_fc2)  #预测值 用softmax分类器（多分类，输出是各个类的概率）

cross_entropy=tf.reduce_mean(-tf.reduce_sum(ys*tf.log(prediction),reduction_indices=[1]))
train_step=tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

#run
sess=tf.Session()
sess.run(tf.global_variables_initializer())

#train
if int((tf.__version__).split('.')[1]) < 12 and int((tf.__version__).split('.')[0]) < 1:
    init = tf.initialize_all_variables()
else:
    init = tf.global_variables_initializer()
sess.run(init)

for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={xs: batch_xs, ys: batch_ys, keep_prob: 0.5})   #记得要用feed_dict给我们的众多 placeholder 喂数据！！！
    if i % 50 == 0:
        print(compute_accuracy(
mnist.test.images, mnist.test.labels))
