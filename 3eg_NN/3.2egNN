建造一个完整的神经网络,包括添加神经层,计算误差,训练步骤,判断是否在学习

import tensorflow as tf
import numpy as np

def add_layer(inputs, in_size, out_size, activation_function = None):
    weights = tf.Variable(tf.random_normal([in_size, out_size]))
    biases = tf.Variable(tf.zeros([1,out_size]) + 0.1)
    Wx_plus_b = tf.matmul(inputs,weights) + biases
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    return outputs

#data
x_data = np.linspace(-1,1,300, dtype=np.float32)[:,np.newaxis]
noise = np.random.normal(0,0.05,x_data.shape).astype(np.float32)
y_data = np.square(x_data) - 0.5 + noise
#placeholder
xs = tf.placeholder(tf.float32,[None,1])
ys = tf.placeholder(tf.float32,[None,1])
#NN
l1 = add_layer(xs, 1 ,10, activation_function = tf.nn.relu)
prediction = add_layer(l1, 10, 1, activation_function=None)
loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),reduction_indices=[1]))   #reduction_indices降维，沿哪个方向操作，none全压为一个书，0行压为1（竖着运算），1行压为1（横着算）
train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
#run
init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)
#train
for i in range(1000):
    sess.run(train_step,feed_dict = {xs:x_data,ys:y_data})
    if i % 50 == 0:
        print(sess.run(loss,feed_dict={xs:x_data,ys:y_data}))
        
结果:
0.157746
0.0217399
0.0352191
0.0130831
0.00952153
0.00750238
0.00628285
0.0061576
0.0461373
0.00537163
0.00495416
0.00474149
0.00457322
0.00443633
0.00428461
0.00415913
0.00403687
0.00392026
0.0038374
0.00382907

误差在逐渐减小
